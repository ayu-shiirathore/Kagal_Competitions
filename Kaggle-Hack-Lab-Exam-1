{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91462,"databundleVersionId":10803442,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:34:19.045987Z","iopub.execute_input":"2025-01-18T04:34:19.046315Z","iopub.status.idle":"2025-01-18T04:34:20.216100Z","shell.execute_reply.started":"2025-01-18T04:34:19.046289Z","shell.execute_reply":"2025-01-18T04:34:20.215054Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# Read the CSV files into Pandas DataFrames\ntrain_df = pd.read_csv(\"/kaggle/input/ucs-654-kaggle-hack-lab-exam-1/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/ucs-654-kaggle-hack-lab-exam-1/test.csv\")\nsubmission_df = pd.read_csv(\"/kaggle/input/ucs-654-kaggle-hack-lab-exam-1/sample_submission.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:34:39.030307Z","iopub.execute_input":"2025-01-18T04:34:39.030770Z","iopub.status.idle":"2025-01-18T04:34:39.086803Z","shell.execute_reply.started":"2025-01-18T04:34:39.030728Z","shell.execute_reply":"2025-01-18T04:34:39.085778Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"# Display the first 5 rows of each DataFrame\nprint(\"Train DataFrame Head:\")\nprint(train_df.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"))\n\nprint(\"\\nTest DataFrame Head:\")\nprint(test_df.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"))\n\nprint(\"\\nSubmission DataFrame Head:\")\nprint(submission_df.head().to_markdown(index=False, numalign=\"left\", stralign=\"left\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:34:47.344464Z","iopub.execute_input":"2025-01-18T04:34:47.345029Z","iopub.status.idle":"2025-01-18T04:34:47.379572Z","shell.execute_reply.started":"2025-01-18T04:34:47.344936Z","shell.execute_reply":"2025-01-18T04:34:47.378620Z"}},"outputs":[{"name":"stdout","text":"Train DataFrame Head:\n| target   | f1   | f2    | f3    | f4   | f5   | f6   |\n|:---------|:-----|:------|:------|:-----|:-----|:-----|\n| 27.4     | 47.2 | 40.2  | -16   | 13   | 7.9  | 31.7 |\n| 15.6     | 40.6 | 21.9  | -11.5 | 20   | 5.4  | 16.5 |\n| 23.6     | 47.7 | 27.9  | -12.6 | 46   | 6.7  | 22.4 |\n| 38.9     | 82.7 | 95.5  | -28.5 | 26   | 13.8 | 55.4 |\n| 44.5     | 71   | 141.5 | -23.8 | 85   | 12   | 80.9 |\n\nTest DataFrame Head:\n| id   | f1    | f2    | f3    | f4   | f5   | f6    |\n|:-----|:------|:------|:------|:-----|:-----|:------|\n| 1    | 129.3 | 663.7 | -75.3 | 52   | 29.3 | 298   |\n| 2    | 143.1 | 687.3 | -82.6 | 63   | 30.7 | 306.2 |\n| 3    | 52.3  | 32    | -10.8 | 39   | 7.1  | 24.9  |\n| 4    | 25.1  | 0.5   | -5.6  | 8    | 3.3  | 0.5   |\n| 5    | 112.7 | 701.3 | -59.2 | 40   | 24   | 305.2 |\n\nSubmission DataFrame Head:\n| id   | target   |\n|:-----|:---------|\n| 1    | 93.8     |\n| 2    | 17.6     |\n| 3    | 13.2     |\n| 4    | 16       |\n| 5    | 45.3     |\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Print the column names and their data types for each DataFrame\nprint(\"\\nTrain DataFrame Info:\")\nprint(train_df.info())\n\nprint(\"\\nTest DataFrame Info:\")\nprint(test_df.info())\n\nprint(\"\\nSubmission DataFrame Info:\")\nprint(submission_df.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:34:56.813712Z","iopub.execute_input":"2025-01-18T04:34:56.814066Z","iopub.status.idle":"2025-01-18T04:34:56.854460Z","shell.execute_reply.started":"2025-01-18T04:34:56.814037Z","shell.execute_reply":"2025-01-18T04:34:56.853314Z"}},"outputs":[{"name":"stdout","text":"\nTrain DataFrame Info:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10999 entries, 0 to 10998\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   target  10999 non-null  float64\n 1   f1      10999 non-null  float64\n 2   f2      10999 non-null  float64\n 3   f3      10999 non-null  float64\n 4   f4      10999 non-null  int64  \n 5   f5      10999 non-null  float64\n 6   f6      10999 non-null  float64\ndtypes: float64(6), int64(1)\nmemory usage: 601.6 KB\nNone\n\nTest DataFrame Info:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5383 entries, 0 to 5382\nData columns (total 7 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   id      5383 non-null   int64  \n 1   f1      5383 non-null   float64\n 2   f2      5383 non-null   float64\n 3   f3      5383 non-null   float64\n 4   f4      5383 non-null   int64  \n 5   f5      5383 non-null   float64\n 6   f6      5383 non-null   float64\ndtypes: float64(5), int64(2)\nmemory usage: 294.5 KB\nNone\n\nSubmission DataFrame Info:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 5383 entries, 0 to 5382\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   id      5383 non-null   int64  \n 1   target  5383 non-null   float64\ndtypes: float64(1), int64(1)\nmemory usage: 84.2 KB\nNone\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:00.155562Z","iopub.execute_input":"2025-01-18T04:38:00.155935Z","iopub.status.idle":"2025-01-18T04:38:01.184370Z","shell.execute_reply.started":"2025-01-18T04:38:00.155910Z","shell.execute_reply":"2025-01-18T04:38:01.183173Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# Check for missing values and drop duplicates in train_df and test_df\ntrain_df.dropna(inplace=True)\ntrain_df.drop_duplicates(inplace=True)\n\ntest_df.dropna(inplace=True)\ntest_df.drop_duplicates(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:08.040397Z","iopub.execute_input":"2025-01-18T04:38:08.040951Z","iopub.status.idle":"2025-01-18T04:38:08.057371Z","shell.execute_reply.started":"2025-01-18T04:38:08.040919Z","shell.execute_reply":"2025-01-18T04:38:08.056447Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# Isolate features and target variable for train_df\nX_train = train_df.drop('target', axis=1)\ny_train = train_df['target']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:17.364716Z","iopub.execute_input":"2025-01-18T04:38:17.365079Z","iopub.status.idle":"2025-01-18T04:38:17.370943Z","shell.execute_reply.started":"2025-01-18T04:38:17.365049Z","shell.execute_reply":"2025-01-18T04:38:17.369991Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Isolate features for test_df (no target variable in test_df)\nX_test = test_df.drop('id', axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:24.195892Z","iopub.execute_input":"2025-01-18T04:38:24.196271Z","iopub.status.idle":"2025-01-18T04:38:24.201562Z","shell.execute_reply.started":"2025-01-18T04:38:24.196240Z","shell.execute_reply":"2025-01-18T04:38:24.200330Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"# Split the training data into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:32.160197Z","iopub.execute_input":"2025-01-18T04:38:32.160568Z","iopub.status.idle":"2025-01-18T04:38:32.168940Z","shell.execute_reply.started":"2025-01-18T04:38:32.160494Z","shell.execute_reply":"2025-01-18T04:38:32.168018Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Train a Random Forest Regressor model\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:40.941281Z","iopub.execute_input":"2025-01-18T04:38:40.941675Z","iopub.status.idle":"2025-01-18T04:38:44.777776Z","shell.execute_reply.started":"2025-01-18T04:38:40.941644Z","shell.execute_reply":"2025-01-18T04:38:44.776594Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"RandomForestRegressor(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"# Predict the target variable for the validation set\ny_pred = model.predict(X_val)\n\n# Evaluate the model's performance using R-squared\nr2 = r2_score(y_val, y_pred)\nprint(f\"R-squared on validation set: {r2:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:38:52.683091Z","iopub.execute_input":"2025-01-18T04:38:52.683467Z","iopub.status.idle":"2025-01-18T04:38:52.749788Z","shell.execute_reply.started":"2025-01-18T04:38:52.683435Z","shell.execute_reply":"2025-01-18T04:38:52.748775Z"}},"outputs":[{"name":"stdout","text":"R-squared on validation set: 0.7611\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Train a Random Forest Regressor model on the entire training data\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict the target variable for the test set\ny_pred_test = model.predict(X_test)\n\n# Create a new DataFrame for submission\nsubmission_df = pd.DataFrame({'id': test_df['id'], 'target': y_pred_test})\n\n# Write the predictions to a CSV file\nsubmission_df.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-18T04:39:14.429865Z","iopub.execute_input":"2025-01-18T04:39:14.430277Z","iopub.status.idle":"2025-01-18T04:39:18.349786Z","shell.execute_reply.started":"2025-01-18T04:39:14.430242Z","shell.execute_reply":"2025-01-18T04:39:18.348680Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}